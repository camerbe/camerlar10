<?php

namespace App\Repositories;

use App\Helpers\ToolBox;
use App\Models\Article;
use App\Models\Pays;
use App\Repositories\BaseRepository;
use App\Models\Categorie;
use Illuminate\Support\Str;
use Carbon\Carbon;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use Html2Text\Html2Text;



class ArticleRepository extends BaseRepository
{
    public function __construct(Article $article)
    {
        $this->model=$article;
    }

    public function findById($id)
    {
        return parent::findById($id); // TODO: Change the autogenerated stub
    }

    public function findBySlug($slug){
        $article= $this->model::where('slug',$slug)->orderByDesc('dateparution')->first();
        $article->hit++;
        $article->save();
        return $article;
    }
    /*public function getArticleBySlug($slug){
        $articles=  Article::where("slug",$slug)->orderByDesc('dateparution')->first();
        $article->hit++;
        $article->save();

        return ArticleResource::collection($articles);
    }*/
    public function delete($id)
    {
        return parent::delete($id); // TODO: Change the autogenerated stub
    }

    public function update(array $input, $id)
    {

        $currentArticle = $this->findById($id);

        $user_id = isset($input['user_id']) ? $input['user_id']: $currentArticle->user_id;
        $titre = isset($input["titre"]) ? Str::title($input["titre"]):$currentArticle->titre;
        $auteur = isset($input["auteur"]) ? Str::title($input["auteur"]) : $currentArticle->auteur;
        $source = isset($input["source"]) ? Str::title($input["source"]) : $currentArticle->source;
        $pays_code = isset($input["pays_code"]) ? $input["pays_code"] : $currentArticle->pays_code;
        $rubrique_id = isset($input["rubrique_id"]) ? $input["rubrique_id"] : $currentArticle->rubrique_id;
        $image = isset($input["image"]) ? $input["image"] : $currentArticle->image;
        $dateparution = isset($input["dateparution"]) ? $input["dateparution"] : $currentArticle->dateparution;
        $article = isset($input["article"]) ? $input["article"] : $currentArticle->article;

        $titreForSlug = $titre;
        $pays = Pays::where('code',$pays_code)->first();
        $titreForSlug = Str::contains(Str::lower($titreForSlug), Str::lower($pays->pays)) ? $titreForSlug : Str::slug($pays->pays . ' ' . $titreForSlug);
        $titreForSlug = Str::contains(Str::lower($titreForSlug), Str::lower($pays->country)) ? $titreForSlug :Str::slug( $titreForSlug .' ' .$pays->country) ;

        $html=new Html2Text($article);
        $input["source"]=$source;
        $input["titre"]=Str::title($titre);
        $input["chapeau"] = Str::limit($html->getText(), 160);
        $input["user_id"] = $user_id;
        $input["pays_code"] = $pays_code;
        $input["rubrique_id"] = $rubrique_id;
        $input["image"] = $image;
        $input["article"] = $article;
        $input["slug"]=$titreForSlug;

        $input["dateparution"]=Carbon::parse($dateparution)->format('Y-m-d H:i:s');
        
        return parent::update($input, $id); // TODO: Change the autogenerated stub
    }

    public function create(array $input)
    {
        $pays = Pays::whereCode($input["pays_code"])->first();
        $titre = $input["titre"];
        $titre = Str::contains(Str::lower($titre), Str::lower($pays->pays)) ? $titre : Str::slug($pays->pays . ' ' . $titre);
        $titre = Str::contains(Str::lower($titre), Str::lower($pays->country)) ? $titre : Str::slug($titre .' ' .$pays->country) ;

        $html=new Html2Text($input["article"]);

        $input["auteur"]=Str::title($input["auteur"]);
        $input["keyword"]=Str::title($input["keyword"]);
        $input["source"]=Str::title($input["source"]);
        $input["titre"]=Str::title($input["titre"]);

        $input["chapeau"] = Str::limit($html->getText(), 160);
        $input["slug"]=$titre;
        $input["dateparution"]=Carbon::parse($input['dateparution'])->format('Y-m-d H:i:s');
        $articleId= parent::create($input)->id;

        $articleId= parent::create($input)->id; // TODO: Change the autogenerated stub
        return parent::findById($articleId);
    }

    public function findAll(){
        Cache::forget('admin-article-list');
        if($article=Cache::get('admin-article-list')){
            return $article;
        }
        $article=Article::orderBy('dateparution','desc')->jsonPaginate();
        Cache::set('admin-article-list',$article,Carbon::now()->addMinute(10));
        return $article;
    }

}
