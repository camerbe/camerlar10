<?php

namespace App\Repositories;

use App\Models\Article;
use App\Models\Publicite;
use App\Models\Rubrique;
use App\Models\User;
use App\Repositories\BaseRepository;
use Illuminate\Support\Str;
use Carbon\Carbon;
use Illuminate\Support\Facades\Cache;
class UserRepository extends BaseRepository
{
    public function __construct(User $user)
    {
        $this->model=$user;
    }

    public function findById($id)
    {
        return parent::findById($id); // TODO: Change the autogenerated stub
    }

    public function delete($id)
    {
       return parent::delete($id); // TODO: Change the autogenerated stub
    }

    public function update(array $input, $id)
    {
        $currentUser=$this->findById($id);
        $nom=isset($input['nom'])?Str::title($input['nom']):$currentUser->nom;
        $prenom=isset($input['prenom'])?Str::title($input['prenom']):$currentUser->prenom;
        $role_id=isset($input['role_id'])? $input['role_id']:$currentUser->role_id;
        $input['nom'] = $nom;
        $input['prenom'] = $prenom;
        $input['role_id'] = $role_id;
        return parent::update($input, $id); // TODO: Change the autogenerated stub
    }

    public function create(array $input)
    {
        $input['nom']=Str::title($input['nom']);
        $input['prenom']=Str::title($input['prenom']);
        $input['password']=bcrypt($input['password']);
        $userId= parent::create($input)->id;
        return $this->findById($userId);
    }
    public function findAll(){
        $cache="admin-user-list";
        Cache::forget($cache);
        if(Cache::has($cache)){
            return Cache::get($cache);
        }
        Cache::remember($cache,now()->addHour(1),function() use($cache){
            return User::orderBy('nom','asc')->orderBy('prenom','asc')
                ->jsonPaginate();
        });
        return Cache::get($cache);
    }

}
